// Package dbschema contains generated code for schema 'emoine'.
package dbschema

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Comment represents a row from 'emoine.comment'.
type Comment struct {
	ID          UUID           `json:"id"`           // id
	UserID      string         `json:"user_id"`      // user_id
	MeetingID   UUID           `json:"meeting_id"`   // meeting_id
	Text        string         `json:"text"`         // text
	CreatedAt   time.Time      `json:"created_at"`   // created_at
	IsAnonymous bool           `json:"is_anonymous"` // is_anonymous
	Color       sql.NullString `json:"color"`        // color
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Comment] exists in the database.
func (c *Comment) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Comment] has been marked for deletion
// from the database.
func (c *Comment) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Comment] to the database.
func (c *Comment) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO emoine.comment (` +
		`id, user_id, meeting_id, text, created_at, is_anonymous, color` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, c.ID, c.UserID, c.MeetingID, c.Text, c.CreatedAt, c.IsAnonymous, c.Color)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.UserID, c.MeetingID, c.Text, c.CreatedAt, c.IsAnonymous, c.Color); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Comment] in the database.
func (c *Comment) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE emoine.comment SET ` +
		`user_id = ?, meeting_id = ?, text = ?, created_at = ?, is_anonymous = ?, color = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, c.UserID, c.MeetingID, c.Text, c.CreatedAt, c.IsAnonymous, c.Color, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.UserID, c.MeetingID, c.Text, c.CreatedAt, c.IsAnonymous, c.Color, c.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Comment] to the database.
func (c *Comment) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Comment].
func (c *Comment) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO emoine.comment (` +
		`id, user_id, meeting_id, text, created_at, is_anonymous, color` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), user_id = VALUES(user_id), meeting_id = VALUES(meeting_id), text = VALUES(text), created_at = VALUES(created_at), is_anonymous = VALUES(is_anonymous), color = VALUES(color)`
	// run
	logf(sqlstr, c.ID, c.UserID, c.MeetingID, c.Text, c.CreatedAt, c.IsAnonymous, c.Color)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.UserID, c.MeetingID, c.Text, c.CreatedAt, c.IsAnonymous, c.Color); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Comment] from the database.
func (c *Comment) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM emoine.comment ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// Comments retrieves all rows from 'emoine.comment' as a [Comment].
func Comments(ctx context.Context, db DB, limit, offset int) ([]Comment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, meeting_id, text, created_at, is_anonymous, color ` +
		`FROM emoine.comment ` +
		`LIMIT ? OFFSET ?`
	// run
	logf(sqlstr, limit, offset)

	rows, err := db.QueryContext(ctx, sqlstr, limit, offset)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []Comment
	for rows.Next() {
		c := Comment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.ID, &c.UserID, &c.MeetingID, &c.Text, &c.CreatedAt, &c.IsAnonymous, &c.Color); err != nil {
			return nil, logerror(err)
		}
		res = append(res, c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// CommentCount retrieves the number of rows in 'emoine.comment'.
func CommentCount(ctx context.Context, db DB) (int, error) {
	// query
	const sqlstr = `SELECT COUNT(*) FROM emoine.comment`
	// run
	logf(sqlstr)

	var count int
	if err := db.QueryRowContext(ctx, sqlstr).Scan(&count); err != nil {
		return 0, logerror(err)
	}
	return count, nil
}

// CommentByID retrieves a row from 'emoine.comment' as a [Comment].
//
// Generated from index 'comment_id_pkey'.
func CommentByID(ctx context.Context, db DB, id UUID) (*Comment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, meeting_id, text, created_at, is_anonymous, color ` +
		`FROM emoine.comment ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	c := Comment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&c.ID, &c.UserID, &c.MeetingID, &c.Text, &c.CreatedAt, &c.IsAnonymous, &c.Color); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CommentsByMeetingID runs a custom query, returning results as [Comment].
func CommentsByMeetingID(ctx context.Context, db DB, meetingID UUID) ([]*Comment, error) {
	// query
	const sqlstr = `SELECT * FROM comment WHERE meeting_id = ? ORDER BY created_at`
	// run
	logf(sqlstr, meetingID)
	rows, err := db.QueryContext(ctx, sqlstr, meetingID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Comment
	for rows.Next() {
		var c Comment
		// scan
		if err := rows.Scan(&c.ID, &c.UserID, &c.MeetingID, &c.Text, &c.CreatedAt, &c.IsAnonymous, &c.Color); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
