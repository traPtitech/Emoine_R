package dbschema

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Event represents a row from 'emoine.event'.
type Event struct {
	ID          UUID           `json:"id"`          // id
	VideoID     string         `json:"video_id"`    // video_id
	Title       string         `json:"title"`       // title
	Thumbnail   string         `json:"thumbnail"`   // thumbnail
	StartedAt   time.Time      `json:"started_at"`  // started_at
	EndedAt     sql.NullTime   `json:"ended_at"`    // ended_at
	Description sql.NullString `json:"description"` // description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Event] exists in the database.
func (e *Event) Exists() bool {
	return e._exists
}

// Deleted returns true when the [Event] has been marked for deletion
// from the database.
func (e *Event) Deleted() bool {
	return e._deleted
}

// Insert inserts the [Event] to the database.
func (e *Event) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO emoine.event (` +
		`id, video_id, title, thumbnail, started_at, ended_at, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, e.ID, e.VideoID, e.Title, e.Thumbnail, e.StartedAt, e.EndedAt, e.Description)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.VideoID, e.Title, e.Thumbnail, e.StartedAt, e.EndedAt, e.Description); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Update updates a [Event] in the database.
func (e *Event) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE emoine.event SET ` +
		`video_id = ?, title = ?, thumbnail = ?, started_at = ?, ended_at = ?, description = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, e.VideoID, e.Title, e.Thumbnail, e.StartedAt, e.EndedAt, e.Description, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.VideoID, e.Title, e.Thumbnail, e.StartedAt, e.EndedAt, e.Description, e.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Event] to the database.
func (e *Event) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for [Event].
func (e *Event) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO emoine.event (` +
		`id, video_id, title, thumbnail, started_at, ended_at, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), video_id = VALUES(video_id), title = VALUES(title), thumbnail = VALUES(thumbnail), started_at = VALUES(started_at), ended_at = VALUES(ended_at), description = VALUES(description)`
	// run
	logf(sqlstr, e.ID, e.VideoID, e.Title, e.Thumbnail, e.StartedAt, e.EndedAt, e.Description)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.VideoID, e.Title, e.Thumbnail, e.StartedAt, e.EndedAt, e.Description); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the [Event] from the database.
func (e *Event) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM emoine.event ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// Events retrieves all rows from 'emoine.event' as a [Event].
func Events(ctx context.Context, db DB, limit, offset int) ([]Event, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, video_id, title, thumbnail, started_at, ended_at, description ` +
		`FROM emoine.event ` +
		`LIMIT ? OFFSET ?`
	// run
	logf(sqlstr, limit, offset)

	rows, err := db.QueryContext(ctx, sqlstr, limit, offset)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []Event
	for rows.Next() {
		e := Event{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&e.ID, &e.VideoID, &e.Title, &e.Thumbnail, &e.StartedAt, &e.EndedAt, &e.Description); err != nil {
			return nil, logerror(err)
		}
		res = append(res, e)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// EventCount retrieves the number of rows in 'emoine.event'.
func EventCount(ctx context.Context, db DB) (int, error) {
	// query
	const sqlstr = `SELECT COUNT(*) FROM emoine.event`
	// run
	logf(sqlstr)

	var count int
	if err := db.QueryRowContext(ctx, sqlstr).Scan(&count); err != nil {
		return 0, logerror(err)
	}
	return count, nil
}

// EventByID retrieves a row from 'emoine.event' as a [Event].
//
// Generated from index 'event_id_pkey'.
func EventByID(ctx context.Context, db DB, id UUID) (*Event, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, video_id, title, thumbnail, started_at, ended_at, description ` +
		`FROM emoine.event ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	e := Event{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&e.ID, &e.VideoID, &e.Title, &e.Thumbnail, &e.StartedAt, &e.EndedAt, &e.Description); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}
