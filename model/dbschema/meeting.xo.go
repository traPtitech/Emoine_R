package dbschema

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Meeting represents a row from 'emoine.meeting'.
type Meeting struct {
	ID          UUID           `json:"id"`          // id
	VideoID     string         `json:"video_id"`    // video_id
	Title       string         `json:"title"`       // title
	Thumbnail   string         `json:"thumbnail"`   // thumbnail
	StartedAt   time.Time      `json:"started_at"`  // started_at
	EndedAt     sql.NullTime   `json:"ended_at"`    // ended_at
	Description sql.NullString `json:"description"` // description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Meeting] exists in the database.
func (m *Meeting) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Meeting] has been marked for deletion
// from the database.
func (m *Meeting) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Meeting] to the database.
func (m *Meeting) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO emoine.meeting (` +
		`id, video_id, title, thumbnail, started_at, ended_at, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, m.ID, m.VideoID, m.Title, m.Thumbnail, m.StartedAt, m.EndedAt, m.Description)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID, m.VideoID, m.Title, m.Thumbnail, m.StartedAt, m.EndedAt, m.Description); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Meeting] in the database.
func (m *Meeting) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE emoine.meeting SET ` +
		`video_id = ?, title = ?, thumbnail = ?, started_at = ?, ended_at = ?, description = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, m.VideoID, m.Title, m.Thumbnail, m.StartedAt, m.EndedAt, m.Description, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.VideoID, m.Title, m.Thumbnail, m.StartedAt, m.EndedAt, m.Description, m.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Meeting] to the database.
func (m *Meeting) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Meeting].
func (m *Meeting) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO emoine.meeting (` +
		`id, video_id, title, thumbnail, started_at, ended_at, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), video_id = VALUES(video_id), title = VALUES(title), thumbnail = VALUES(thumbnail), started_at = VALUES(started_at), ended_at = VALUES(ended_at), description = VALUES(description)`
	// run
	logf(sqlstr, m.ID, m.VideoID, m.Title, m.Thumbnail, m.StartedAt, m.EndedAt, m.Description)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID, m.VideoID, m.Title, m.Thumbnail, m.StartedAt, m.EndedAt, m.Description); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Meeting] from the database.
func (m *Meeting) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM emoine.meeting ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// Meetings retrieves all rows from 'emoine.meeting' as a [Meeting].
func Meetings(ctx context.Context, db DB, limit, int, offset int) ([]Meeting, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, video_id, title, thumbnail, started_at, ended_at, description ` +
		`FROM emoine.meeting ` +
		`LIMIT ? OFFSET ?`
	// run
	logf(sqlstr, limit, offset)

	rows, err := db.QueryContext(ctx, sqlstr, limit, offset)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []Meeting
	for rows.Next() {
		m := Meeting{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&m.ID, &m.VideoID, &m.Title, &m.Thumbnail, &m.StartedAt, &m.EndedAt, &m.Description); err != nil {
			return nil, logerror(err)
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// MeetingByID retrieves a row from 'emoine.meeting' as a [Meeting].
//
// Generated from index 'meeting_id_pkey'.
func MeetingByID(ctx context.Context, db DB, id UUID) (*Meeting, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, video_id, title, thumbnail, started_at, ended_at, description ` +
		`FROM emoine.meeting ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	m := Meeting{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&m.ID, &m.VideoID, &m.Title, &m.Thumbnail, &m.StartedAt, &m.EndedAt, &m.Description); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}
