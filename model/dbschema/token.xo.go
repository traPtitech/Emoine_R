package dbschema

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Token represents a row from 'emoine.token'.
type Token struct {
	Token       string         `json:"token"`       // token
	CreatorID   string         `json:"creator_id"`  // creator_id
	UserID      string         `json:"user_id"`     // user_id
	CreatedAt   time.Time      `json:"created_at"`  // created_at
	MeetingID   UUID           `json:"meeting_id"`  // meeting_id
	ExprieAt    sql.NullTime   `json:"exprie_at"`   // exprie_at
	Description sql.NullString `json:"description"` // description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Token] exists in the database.
func (t *Token) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Token] has been marked for deletion
// from the database.
func (t *Token) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Token] to the database.
func (t *Token) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO emoine.token (` +
		`token, creator_id, user_id, created_at, meeting_id, exprie_at, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, t.Token, t.CreatorID, t.UserID, t.CreatedAt, t.MeetingID, t.ExprieAt, t.Description)
	if _, err := db.ExecContext(ctx, sqlstr, t.Token, t.CreatorID, t.UserID, t.CreatedAt, t.MeetingID, t.ExprieAt, t.Description); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Token] in the database.
func (t *Token) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE emoine.token SET ` +
		`creator_id = ?, user_id = ?, created_at = ?, meeting_id = ?, exprie_at = ?, description = ? ` +
		`WHERE token = ?`
	// run
	logf(sqlstr, t.CreatorID, t.UserID, t.CreatedAt, t.MeetingID, t.ExprieAt, t.Description, t.Token)
	if _, err := db.ExecContext(ctx, sqlstr, t.CreatorID, t.UserID, t.CreatedAt, t.MeetingID, t.ExprieAt, t.Description, t.Token); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Token] to the database.
func (t *Token) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Token].
func (t *Token) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO emoine.token (` +
		`token, creator_id, user_id, created_at, meeting_id, exprie_at, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`token = VALUES(token), creator_id = VALUES(creator_id), user_id = VALUES(user_id), created_at = VALUES(created_at), meeting_id = VALUES(meeting_id), exprie_at = VALUES(exprie_at), description = VALUES(description)`
	// run
	logf(sqlstr, t.Token, t.CreatorID, t.UserID, t.CreatedAt, t.MeetingID, t.ExprieAt, t.Description)
	if _, err := db.ExecContext(ctx, sqlstr, t.Token, t.CreatorID, t.UserID, t.CreatedAt, t.MeetingID, t.ExprieAt, t.Description); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Token] from the database.
func (t *Token) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM emoine.token ` +
		`WHERE token = ?`
	// run
	logf(sqlstr, t.Token)
	if _, err := db.ExecContext(ctx, sqlstr, t.Token); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// Tokens retrieves all rows from 'emoine.token' as a [Token].
func Tokens(ctx context.Context, db DB, limit, int, offset int) ([]Token, error) {
	// query
	const sqlstr = `SELECT ` +
		`token, creator_id, user_id, created_at, meeting_id, exprie_at, description ` +
		`FROM emoine.token ` +
		`LIMIT ? OFFSET ?`
	// run
	logf(sqlstr, limit, offset)

	rows, err := db.QueryContext(ctx, sqlstr, limit, offset)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []Token
	for rows.Next() {
		t := Token{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&t.Token, &t.CreatorID, &t.UserID, &t.CreatedAt, &t.MeetingID, &t.ExprieAt, &t.Description); err != nil {
			return nil, logerror(err)
		}
		res = append(res, t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TokenCount retrieves the number of rows in 'emoine.token'.
func TokenCount(ctx context.Context, db DB) (int, error) {
	// query
	const sqlstr = `SELECT COUNT(*) FROM emoine.token`
	// run
	logf(sqlstr)

	var count int
	if err := db.QueryRowContext(ctx, sqlstr).Scan(&count); err != nil {
		return 0, logerror(err)
	}
	return count, nil
}

// TokenByToken retrieves a row from 'emoine.token' as a [Token].
//
// Generated from index 'token_token_pkey'.
func TokenByToken(ctx context.Context, db DB, token string) (*Token, error) {
	// query
	const sqlstr = `SELECT ` +
		`token, creator_id, user_id, created_at, meeting_id, exprie_at, description ` +
		`FROM emoine.token ` +
		`WHERE token = ?`
	// run
	logf(sqlstr, token)
	t := Token{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, token).Scan(&t.Token, &t.CreatorID, &t.UserID, &t.CreatedAt, &t.MeetingID, &t.ExprieAt, &t.Description); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}
