syntax = "proto3";
package emoine_r.v1;

import "emoine_r/v1/schema.proto";

// 権限が必要ないAPIを提供します
service GeneralAPIService {
  // イベント一覧を取得します
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);
  // 該当するイベントを取得します
  rpc GetEvent(GetEventRequest) returns (GetEventResponse);
  // 該当するイベントのコメント一覧を取得します
  rpc GetEventComments(GetEventCommentsRequest) returns (GetEventCommentsResponse);
  // 該当するイベントのリアクション一覧を取得します
  rpc GetEventReactions(GetEventReactionsRequest) returns (GetEventReactionsResponse);
  // イベントのストリームに接続します
  rpc ConnectToEventStream(ConnectToEventStreamRequest) returns (stream ConnectToEventStreamResponse);
  // (コメントはイベントのストリームに反映されます)
  rpc SendComment(SendCommentRequest) returns (SendCommentResponse);
  // (リアクションはイベントのストリームに反映されます)
  rpc SendReaction(SendReactionRequest) returns (SendReactionResponse);
}

message GetEventsRequest {
  // default: 10
  optional int32 limit = 1;
  // default: 0
  optional int32 offset = 2;
}

message GetEventsResponse {
  int32 total = 1;
  repeated Event events = 2;
}

message GetEventRequest {
  string id = 1;
}

message GetEventResponse {
  Event event = 1;
}

message GetEventCommentsRequest {
  string event_id = 1;
}

message GetEventCommentsResponse {
  repeated Comment comments = 1;
}

message GetEventReactionsRequest {
  string event_id = 1;
}

message GetEventReactionsResponse {
  // reactions are sorted by created_at asc (oldest first)
  repeated Reaction reactions = 1;
}

message ConnectToEventStreamRequest {
  string event_id = 1;
}

message ConnectToEventStreamResponse {
  oneof stream_event {
    Event event = 1;
    Comment comment = 2;
    Reaction reaction = 3;
  }
}

message SendCommentRequest {
  string event_id = 1;
  string text = 2;
  bool is_anonymous = 3;
  string color = 4;
}

message SendCommentResponse {
  Comment comment = 1;
}

message SendReactionRequest {
  string event_id = 1;
  string stamp_id = 2;
}

message SendReactionResponse {
  Reaction reaction = 1;
}
