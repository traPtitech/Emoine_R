// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: emoine_r/v1/admin_api.proto

package emoine_rv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/traPtitech/Emoine_R/pkg/bufgen/emoine_r/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminAPIServiceName is the fully-qualified name of the AdminAPIService service.
	AdminAPIServiceName = "emoine_r.v1.AdminAPIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminAPIServiceCreateMeetingProcedure is the fully-qualified name of the AdminAPIService's
	// CreateMeeting RPC.
	AdminAPIServiceCreateMeetingProcedure = "/emoine_r.v1.AdminAPIService/CreateMeeting"
	// AdminAPIServiceUpdateMeetingProcedure is the fully-qualified name of the AdminAPIService's
	// UpdateMeeting RPC.
	AdminAPIServiceUpdateMeetingProcedure = "/emoine_r.v1.AdminAPIService/UpdateMeeting"
	// AdminAPIServiceDeleteMeetingProcedure is the fully-qualified name of the AdminAPIService's
	// DeleteMeeting RPC.
	AdminAPIServiceDeleteMeetingProcedure = "/emoine_r.v1.AdminAPIService/DeleteMeeting"
	// AdminAPIServiceGetMeetingTokensProcedure is the fully-qualified name of the AdminAPIService's
	// GetMeetingTokens RPC.
	AdminAPIServiceGetMeetingTokensProcedure = "/emoine_r.v1.AdminAPIService/GetMeetingTokens"
	// AdminAPIServiceGetTokensProcedure is the fully-qualified name of the AdminAPIService's GetTokens
	// RPC.
	AdminAPIServiceGetTokensProcedure = "/emoine_r.v1.AdminAPIService/GetTokens"
	// AdminAPIServiceGetTokenProcedure is the fully-qualified name of the AdminAPIService's GetToken
	// RPC.
	AdminAPIServiceGetTokenProcedure = "/emoine_r.v1.AdminAPIService/GetToken"
	// AdminAPIServiceCreateTokenProcedure is the fully-qualified name of the AdminAPIService's
	// CreateToken RPC.
	AdminAPIServiceCreateTokenProcedure = "/emoine_r.v1.AdminAPIService/CreateToken"
	// AdminAPIServiceUpdateTokenProcedure is the fully-qualified name of the AdminAPIService's
	// UpdateToken RPC.
	AdminAPIServiceUpdateTokenProcedure = "/emoine_r.v1.AdminAPIService/UpdateToken"
)

// AdminAPIServiceClient is a client for the emoine_r.v1.AdminAPIService service.
type AdminAPIServiceClient interface {
	// CreateMeeting 集会を作成します
	CreateMeeting(context.Context, *connect_go.Request[v1.CreateMeetingRequest]) (*connect_go.Response[v1.CreateMeetingResponse], error)
	// UpdateMeeting 集会情報を更新します
	UpdateMeeting(context.Context, *connect_go.Request[v1.UpdateMeetingRequest]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteMeeting 集会を削除します
	DeleteMeeting(context.Context, *connect_go.Request[v1.DeleteMeetingRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetMeetingTokens 該当する集会のトークン一覧を取得します
	GetMeetingTokens(context.Context, *connect_go.Request[v1.GetMeetingTokensRequest]) (*connect_go.Response[v1.GetMeetingTokensResponse], error)
	// GetTokens トークン一覧を取得します
	GetTokens(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetTokensResponse], error)
	// GetToken 該当するトークンを取得します
	GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error)
	// CreateToken トークンを作成します
	CreateToken(context.Context, *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error)
	// UpdateToken トークン情報を更新します
	UpdateToken(context.Context, *connect_go.Request[v1.UpdateTokenRequest]) (*connect_go.Response[v1.UpdateTokenResponse], error)
}

// NewAdminAPIServiceClient constructs a client for the emoine_r.v1.AdminAPIService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminAPIServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminAPIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminAPIServiceClient{
		createMeeting: connect_go.NewClient[v1.CreateMeetingRequest, v1.CreateMeetingResponse](
			httpClient,
			baseURL+AdminAPIServiceCreateMeetingProcedure,
			opts...,
		),
		updateMeeting: connect_go.NewClient[v1.UpdateMeetingRequest, emptypb.Empty](
			httpClient,
			baseURL+AdminAPIServiceUpdateMeetingProcedure,
			opts...,
		),
		deleteMeeting: connect_go.NewClient[v1.DeleteMeetingRequest, emptypb.Empty](
			httpClient,
			baseURL+AdminAPIServiceDeleteMeetingProcedure,
			opts...,
		),
		getMeetingTokens: connect_go.NewClient[v1.GetMeetingTokensRequest, v1.GetMeetingTokensResponse](
			httpClient,
			baseURL+AdminAPIServiceGetMeetingTokensProcedure,
			opts...,
		),
		getTokens: connect_go.NewClient[emptypb.Empty, v1.GetTokensResponse](
			httpClient,
			baseURL+AdminAPIServiceGetTokensProcedure,
			opts...,
		),
		getToken: connect_go.NewClient[v1.GetTokenRequest, v1.GetTokenResponse](
			httpClient,
			baseURL+AdminAPIServiceGetTokenProcedure,
			opts...,
		),
		createToken: connect_go.NewClient[v1.CreateTokenRequest, v1.CreateTokenResponse](
			httpClient,
			baseURL+AdminAPIServiceCreateTokenProcedure,
			opts...,
		),
		updateToken: connect_go.NewClient[v1.UpdateTokenRequest, v1.UpdateTokenResponse](
			httpClient,
			baseURL+AdminAPIServiceUpdateTokenProcedure,
			opts...,
		),
	}
}

// adminAPIServiceClient implements AdminAPIServiceClient.
type adminAPIServiceClient struct {
	createMeeting    *connect_go.Client[v1.CreateMeetingRequest, v1.CreateMeetingResponse]
	updateMeeting    *connect_go.Client[v1.UpdateMeetingRequest, emptypb.Empty]
	deleteMeeting    *connect_go.Client[v1.DeleteMeetingRequest, emptypb.Empty]
	getMeetingTokens *connect_go.Client[v1.GetMeetingTokensRequest, v1.GetMeetingTokensResponse]
	getTokens        *connect_go.Client[emptypb.Empty, v1.GetTokensResponse]
	getToken         *connect_go.Client[v1.GetTokenRequest, v1.GetTokenResponse]
	createToken      *connect_go.Client[v1.CreateTokenRequest, v1.CreateTokenResponse]
	updateToken      *connect_go.Client[v1.UpdateTokenRequest, v1.UpdateTokenResponse]
}

// CreateMeeting calls emoine_r.v1.AdminAPIService.CreateMeeting.
func (c *adminAPIServiceClient) CreateMeeting(ctx context.Context, req *connect_go.Request[v1.CreateMeetingRequest]) (*connect_go.Response[v1.CreateMeetingResponse], error) {
	return c.createMeeting.CallUnary(ctx, req)
}

// UpdateMeeting calls emoine_r.v1.AdminAPIService.UpdateMeeting.
func (c *adminAPIServiceClient) UpdateMeeting(ctx context.Context, req *connect_go.Request[v1.UpdateMeetingRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateMeeting.CallUnary(ctx, req)
}

// DeleteMeeting calls emoine_r.v1.AdminAPIService.DeleteMeeting.
func (c *adminAPIServiceClient) DeleteMeeting(ctx context.Context, req *connect_go.Request[v1.DeleteMeetingRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteMeeting.CallUnary(ctx, req)
}

// GetMeetingTokens calls emoine_r.v1.AdminAPIService.GetMeetingTokens.
func (c *adminAPIServiceClient) GetMeetingTokens(ctx context.Context, req *connect_go.Request[v1.GetMeetingTokensRequest]) (*connect_go.Response[v1.GetMeetingTokensResponse], error) {
	return c.getMeetingTokens.CallUnary(ctx, req)
}

// GetTokens calls emoine_r.v1.AdminAPIService.GetTokens.
func (c *adminAPIServiceClient) GetTokens(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetTokensResponse], error) {
	return c.getTokens.CallUnary(ctx, req)
}

// GetToken calls emoine_r.v1.AdminAPIService.GetToken.
func (c *adminAPIServiceClient) GetToken(ctx context.Context, req *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error) {
	return c.getToken.CallUnary(ctx, req)
}

// CreateToken calls emoine_r.v1.AdminAPIService.CreateToken.
func (c *adminAPIServiceClient) CreateToken(ctx context.Context, req *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error) {
	return c.createToken.CallUnary(ctx, req)
}

// UpdateToken calls emoine_r.v1.AdminAPIService.UpdateToken.
func (c *adminAPIServiceClient) UpdateToken(ctx context.Context, req *connect_go.Request[v1.UpdateTokenRequest]) (*connect_go.Response[v1.UpdateTokenResponse], error) {
	return c.updateToken.CallUnary(ctx, req)
}

// AdminAPIServiceHandler is an implementation of the emoine_r.v1.AdminAPIService service.
type AdminAPIServiceHandler interface {
	// CreateMeeting 集会を作成します
	CreateMeeting(context.Context, *connect_go.Request[v1.CreateMeetingRequest]) (*connect_go.Response[v1.CreateMeetingResponse], error)
	// UpdateMeeting 集会情報を更新します
	UpdateMeeting(context.Context, *connect_go.Request[v1.UpdateMeetingRequest]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteMeeting 集会を削除します
	DeleteMeeting(context.Context, *connect_go.Request[v1.DeleteMeetingRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetMeetingTokens 該当する集会のトークン一覧を取得します
	GetMeetingTokens(context.Context, *connect_go.Request[v1.GetMeetingTokensRequest]) (*connect_go.Response[v1.GetMeetingTokensResponse], error)
	// GetTokens トークン一覧を取得します
	GetTokens(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetTokensResponse], error)
	// GetToken 該当するトークンを取得します
	GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error)
	// CreateToken トークンを作成します
	CreateToken(context.Context, *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error)
	// UpdateToken トークン情報を更新します
	UpdateToken(context.Context, *connect_go.Request[v1.UpdateTokenRequest]) (*connect_go.Response[v1.UpdateTokenResponse], error)
}

// NewAdminAPIServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminAPIServiceHandler(svc AdminAPIServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	adminAPIServiceCreateMeetingHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceCreateMeetingProcedure,
		svc.CreateMeeting,
		opts...,
	)
	adminAPIServiceUpdateMeetingHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceUpdateMeetingProcedure,
		svc.UpdateMeeting,
		opts...,
	)
	adminAPIServiceDeleteMeetingHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceDeleteMeetingProcedure,
		svc.DeleteMeeting,
		opts...,
	)
	adminAPIServiceGetMeetingTokensHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceGetMeetingTokensProcedure,
		svc.GetMeetingTokens,
		opts...,
	)
	adminAPIServiceGetTokensHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceGetTokensProcedure,
		svc.GetTokens,
		opts...,
	)
	adminAPIServiceGetTokenHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceGetTokenProcedure,
		svc.GetToken,
		opts...,
	)
	adminAPIServiceCreateTokenHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceCreateTokenProcedure,
		svc.CreateToken,
		opts...,
	)
	adminAPIServiceUpdateTokenHandler := connect_go.NewUnaryHandler(
		AdminAPIServiceUpdateTokenProcedure,
		svc.UpdateToken,
		opts...,
	)
	return "/emoine_r.v1.AdminAPIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminAPIServiceCreateMeetingProcedure:
			adminAPIServiceCreateMeetingHandler.ServeHTTP(w, r)
		case AdminAPIServiceUpdateMeetingProcedure:
			adminAPIServiceUpdateMeetingHandler.ServeHTTP(w, r)
		case AdminAPIServiceDeleteMeetingProcedure:
			adminAPIServiceDeleteMeetingHandler.ServeHTTP(w, r)
		case AdminAPIServiceGetMeetingTokensProcedure:
			adminAPIServiceGetMeetingTokensHandler.ServeHTTP(w, r)
		case AdminAPIServiceGetTokensProcedure:
			adminAPIServiceGetTokensHandler.ServeHTTP(w, r)
		case AdminAPIServiceGetTokenProcedure:
			adminAPIServiceGetTokenHandler.ServeHTTP(w, r)
		case AdminAPIServiceCreateTokenProcedure:
			adminAPIServiceCreateTokenHandler.ServeHTTP(w, r)
		case AdminAPIServiceUpdateTokenProcedure:
			adminAPIServiceUpdateTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminAPIServiceHandler struct{}

func (UnimplementedAdminAPIServiceHandler) CreateMeeting(context.Context, *connect_go.Request[v1.CreateMeetingRequest]) (*connect_go.Response[v1.CreateMeetingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.CreateMeeting is not implemented"))
}

func (UnimplementedAdminAPIServiceHandler) UpdateMeeting(context.Context, *connect_go.Request[v1.UpdateMeetingRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.UpdateMeeting is not implemented"))
}

func (UnimplementedAdminAPIServiceHandler) DeleteMeeting(context.Context, *connect_go.Request[v1.DeleteMeetingRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.DeleteMeeting is not implemented"))
}

func (UnimplementedAdminAPIServiceHandler) GetMeetingTokens(context.Context, *connect_go.Request[v1.GetMeetingTokensRequest]) (*connect_go.Response[v1.GetMeetingTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.GetMeetingTokens is not implemented"))
}

func (UnimplementedAdminAPIServiceHandler) GetTokens(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.GetTokens is not implemented"))
}

func (UnimplementedAdminAPIServiceHandler) GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.GetToken is not implemented"))
}

func (UnimplementedAdminAPIServiceHandler) CreateToken(context.Context, *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.CreateToken is not implemented"))
}

func (UnimplementedAdminAPIServiceHandler) UpdateToken(context.Context, *connect_go.Request[v1.UpdateTokenRequest]) (*connect_go.Response[v1.UpdateTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.AdminAPIService.UpdateToken is not implemented"))
}
