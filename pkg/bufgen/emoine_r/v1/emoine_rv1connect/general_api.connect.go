// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: emoine_r/v1/general_api.proto

package emoine_rv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/traPtitech/Emoine_R/pkg/bufgen/emoine_r/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GeneralAPIServiceName is the fully-qualified name of the GeneralAPIService service.
	GeneralAPIServiceName = "emoine_r.v1.GeneralAPIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GeneralAPIServiceGetMeetingsProcedure is the fully-qualified name of the GeneralAPIService's
	// GetMeetings RPC.
	GeneralAPIServiceGetMeetingsProcedure = "/emoine_r.v1.GeneralAPIService/GetMeetings"
	// GeneralAPIServiceGetMeetingProcedure is the fully-qualified name of the GeneralAPIService's
	// GetMeeting RPC.
	GeneralAPIServiceGetMeetingProcedure = "/emoine_r.v1.GeneralAPIService/GetMeeting"
	// GeneralAPIServiceGetMeetingCommentsProcedure is the fully-qualified name of the
	// GeneralAPIService's GetMeetingComments RPC.
	GeneralAPIServiceGetMeetingCommentsProcedure = "/emoine_r.v1.GeneralAPIService/GetMeetingComments"
	// GeneralAPIServiceGetMeetingReactionsProcedure is the fully-qualified name of the
	// GeneralAPIService's GetMeetingReactions RPC.
	GeneralAPIServiceGetMeetingReactionsProcedure = "/emoine_r.v1.GeneralAPIService/GetMeetingReactions"
	// GeneralAPIServiceConnectToMeetingStreamProcedure is the fully-qualified name of the
	// GeneralAPIService's ConnectToMeetingStream RPC.
	GeneralAPIServiceConnectToMeetingStreamProcedure = "/emoine_r.v1.GeneralAPIService/ConnectToMeetingStream"
	// GeneralAPIServiceSendCommentProcedure is the fully-qualified name of the GeneralAPIService's
	// SendComment RPC.
	GeneralAPIServiceSendCommentProcedure = "/emoine_r.v1.GeneralAPIService/SendComment"
	// GeneralAPIServiceSendReactionProcedure is the fully-qualified name of the GeneralAPIService's
	// SendReaction RPC.
	GeneralAPIServiceSendReactionProcedure = "/emoine_r.v1.GeneralAPIService/SendReaction"
	// GeneralAPIServiceOAuth2AuthorizeProcedure is the fully-qualified name of the GeneralAPIService's
	// OAuth2Authorize RPC.
	GeneralAPIServiceOAuth2AuthorizeProcedure = "/emoine_r.v1.GeneralAPIService/OAuth2Authorize"
	// GeneralAPIServiceOAuth2CallbackProcedure is the fully-qualified name of the GeneralAPIService's
	// OAuth2Callback RPC.
	GeneralAPIServiceOAuth2CallbackProcedure = "/emoine_r.v1.GeneralAPIService/OAuth2Callback"
)

// GeneralAPIServiceClient is a client for the emoine_r.v1.GeneralAPIService service.
type GeneralAPIServiceClient interface {
	// GetMeetings 集会一覧を取得します
	GetMeetings(context.Context, *connect_go.Request[v1.GetMeetingsRequest]) (*connect_go.Response[v1.GetMeetingsResponse], error)
	// GetMeeting 該当する集会を取得します
	GetMeeting(context.Context, *connect_go.Request[v1.GetMeetingRequest]) (*connect_go.Response[v1.GetMeetingResponse], error)
	// GetMeetingComments 該当する集会のコメント一覧を取得します
	GetMeetingComments(context.Context, *connect_go.Request[v1.GetMeetingCommentsRequest]) (*connect_go.Response[v1.GetMeetingCommentsResponse], error)
	// GetMeetingReactions 該当する集会のリアクション一覧を取得します
	GetMeetingReactions(context.Context, *connect_go.Request[v1.GetMeetingReactionsRequest]) (*connect_go.Response[v1.GetMeetingReactionsResponse], error)
	// ConnectToMeetingStream 集会のストリームに接続します
	ConnectToMeetingStream(context.Context, *connect_go.Request[v1.ConnectToMeetingStreamRequest]) (*connect_go.ServerStreamForClient[v1.ConnectToMeetingStreamResponse], error)
	// SendComment 集会中にコメントを送信します (コメントは集会のストリームに反映されます)
	SendComment(context.Context, *connect_go.Request[v1.SendCommentRequest]) (*connect_go.Response[v1.SendCommentResponse], error)
	// SendReaction 集会中にリアクションを送信します (リアクションは集会のストリームに反映されます)
	SendReaction(context.Context, *connect_go.Request[v1.SendReactionRequest]) (*connect_go.Response[v1.SendReactionResponse], error)
	// OAuth2Authorize OAuth2による認可を行います
	OAuth2Authorize(context.Context, *connect_go.Request[v1.OAuth2AuthorizeRequest]) (*connect_go.Response[emptypb.Empty], error)
	// OAuth2Callback OAuth2のコールバックを受け取ります
	OAuth2Callback(context.Context, *connect_go.Request[v1.OAuth2CallbackRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewGeneralAPIServiceClient constructs a client for the emoine_r.v1.GeneralAPIService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGeneralAPIServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GeneralAPIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &generalAPIServiceClient{
		getMeetings: connect_go.NewClient[v1.GetMeetingsRequest, v1.GetMeetingsResponse](
			httpClient,
			baseURL+GeneralAPIServiceGetMeetingsProcedure,
			opts...,
		),
		getMeeting: connect_go.NewClient[v1.GetMeetingRequest, v1.GetMeetingResponse](
			httpClient,
			baseURL+GeneralAPIServiceGetMeetingProcedure,
			opts...,
		),
		getMeetingComments: connect_go.NewClient[v1.GetMeetingCommentsRequest, v1.GetMeetingCommentsResponse](
			httpClient,
			baseURL+GeneralAPIServiceGetMeetingCommentsProcedure,
			opts...,
		),
		getMeetingReactions: connect_go.NewClient[v1.GetMeetingReactionsRequest, v1.GetMeetingReactionsResponse](
			httpClient,
			baseURL+GeneralAPIServiceGetMeetingReactionsProcedure,
			opts...,
		),
		connectToMeetingStream: connect_go.NewClient[v1.ConnectToMeetingStreamRequest, v1.ConnectToMeetingStreamResponse](
			httpClient,
			baseURL+GeneralAPIServiceConnectToMeetingStreamProcedure,
			opts...,
		),
		sendComment: connect_go.NewClient[v1.SendCommentRequest, v1.SendCommentResponse](
			httpClient,
			baseURL+GeneralAPIServiceSendCommentProcedure,
			opts...,
		),
		sendReaction: connect_go.NewClient[v1.SendReactionRequest, v1.SendReactionResponse](
			httpClient,
			baseURL+GeneralAPIServiceSendReactionProcedure,
			opts...,
		),
		oAuth2Authorize: connect_go.NewClient[v1.OAuth2AuthorizeRequest, emptypb.Empty](
			httpClient,
			baseURL+GeneralAPIServiceOAuth2AuthorizeProcedure,
			opts...,
		),
		oAuth2Callback: connect_go.NewClient[v1.OAuth2CallbackRequest, emptypb.Empty](
			httpClient,
			baseURL+GeneralAPIServiceOAuth2CallbackProcedure,
			opts...,
		),
	}
}

// generalAPIServiceClient implements GeneralAPIServiceClient.
type generalAPIServiceClient struct {
	getMeetings            *connect_go.Client[v1.GetMeetingsRequest, v1.GetMeetingsResponse]
	getMeeting             *connect_go.Client[v1.GetMeetingRequest, v1.GetMeetingResponse]
	getMeetingComments     *connect_go.Client[v1.GetMeetingCommentsRequest, v1.GetMeetingCommentsResponse]
	getMeetingReactions    *connect_go.Client[v1.GetMeetingReactionsRequest, v1.GetMeetingReactionsResponse]
	connectToMeetingStream *connect_go.Client[v1.ConnectToMeetingStreamRequest, v1.ConnectToMeetingStreamResponse]
	sendComment            *connect_go.Client[v1.SendCommentRequest, v1.SendCommentResponse]
	sendReaction           *connect_go.Client[v1.SendReactionRequest, v1.SendReactionResponse]
	oAuth2Authorize        *connect_go.Client[v1.OAuth2AuthorizeRequest, emptypb.Empty]
	oAuth2Callback         *connect_go.Client[v1.OAuth2CallbackRequest, emptypb.Empty]
}

// GetMeetings calls emoine_r.v1.GeneralAPIService.GetMeetings.
func (c *generalAPIServiceClient) GetMeetings(ctx context.Context, req *connect_go.Request[v1.GetMeetingsRequest]) (*connect_go.Response[v1.GetMeetingsResponse], error) {
	return c.getMeetings.CallUnary(ctx, req)
}

// GetMeeting calls emoine_r.v1.GeneralAPIService.GetMeeting.
func (c *generalAPIServiceClient) GetMeeting(ctx context.Context, req *connect_go.Request[v1.GetMeetingRequest]) (*connect_go.Response[v1.GetMeetingResponse], error) {
	return c.getMeeting.CallUnary(ctx, req)
}

// GetMeetingComments calls emoine_r.v1.GeneralAPIService.GetMeetingComments.
func (c *generalAPIServiceClient) GetMeetingComments(ctx context.Context, req *connect_go.Request[v1.GetMeetingCommentsRequest]) (*connect_go.Response[v1.GetMeetingCommentsResponse], error) {
	return c.getMeetingComments.CallUnary(ctx, req)
}

// GetMeetingReactions calls emoine_r.v1.GeneralAPIService.GetMeetingReactions.
func (c *generalAPIServiceClient) GetMeetingReactions(ctx context.Context, req *connect_go.Request[v1.GetMeetingReactionsRequest]) (*connect_go.Response[v1.GetMeetingReactionsResponse], error) {
	return c.getMeetingReactions.CallUnary(ctx, req)
}

// ConnectToMeetingStream calls emoine_r.v1.GeneralAPIService.ConnectToMeetingStream.
func (c *generalAPIServiceClient) ConnectToMeetingStream(ctx context.Context, req *connect_go.Request[v1.ConnectToMeetingStreamRequest]) (*connect_go.ServerStreamForClient[v1.ConnectToMeetingStreamResponse], error) {
	return c.connectToMeetingStream.CallServerStream(ctx, req)
}

// SendComment calls emoine_r.v1.GeneralAPIService.SendComment.
func (c *generalAPIServiceClient) SendComment(ctx context.Context, req *connect_go.Request[v1.SendCommentRequest]) (*connect_go.Response[v1.SendCommentResponse], error) {
	return c.sendComment.CallUnary(ctx, req)
}

// SendReaction calls emoine_r.v1.GeneralAPIService.SendReaction.
func (c *generalAPIServiceClient) SendReaction(ctx context.Context, req *connect_go.Request[v1.SendReactionRequest]) (*connect_go.Response[v1.SendReactionResponse], error) {
	return c.sendReaction.CallUnary(ctx, req)
}

// OAuth2Authorize calls emoine_r.v1.GeneralAPIService.OAuth2Authorize.
func (c *generalAPIServiceClient) OAuth2Authorize(ctx context.Context, req *connect_go.Request[v1.OAuth2AuthorizeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.oAuth2Authorize.CallUnary(ctx, req)
}

// OAuth2Callback calls emoine_r.v1.GeneralAPIService.OAuth2Callback.
func (c *generalAPIServiceClient) OAuth2Callback(ctx context.Context, req *connect_go.Request[v1.OAuth2CallbackRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.oAuth2Callback.CallUnary(ctx, req)
}

// GeneralAPIServiceHandler is an implementation of the emoine_r.v1.GeneralAPIService service.
type GeneralAPIServiceHandler interface {
	// GetMeetings 集会一覧を取得します
	GetMeetings(context.Context, *connect_go.Request[v1.GetMeetingsRequest]) (*connect_go.Response[v1.GetMeetingsResponse], error)
	// GetMeeting 該当する集会を取得します
	GetMeeting(context.Context, *connect_go.Request[v1.GetMeetingRequest]) (*connect_go.Response[v1.GetMeetingResponse], error)
	// GetMeetingComments 該当する集会のコメント一覧を取得します
	GetMeetingComments(context.Context, *connect_go.Request[v1.GetMeetingCommentsRequest]) (*connect_go.Response[v1.GetMeetingCommentsResponse], error)
	// GetMeetingReactions 該当する集会のリアクション一覧を取得します
	GetMeetingReactions(context.Context, *connect_go.Request[v1.GetMeetingReactionsRequest]) (*connect_go.Response[v1.GetMeetingReactionsResponse], error)
	// ConnectToMeetingStream 集会のストリームに接続します
	ConnectToMeetingStream(context.Context, *connect_go.Request[v1.ConnectToMeetingStreamRequest], *connect_go.ServerStream[v1.ConnectToMeetingStreamResponse]) error
	// SendComment 集会中にコメントを送信します (コメントは集会のストリームに反映されます)
	SendComment(context.Context, *connect_go.Request[v1.SendCommentRequest]) (*connect_go.Response[v1.SendCommentResponse], error)
	// SendReaction 集会中にリアクションを送信します (リアクションは集会のストリームに反映されます)
	SendReaction(context.Context, *connect_go.Request[v1.SendReactionRequest]) (*connect_go.Response[v1.SendReactionResponse], error)
	// OAuth2Authorize OAuth2による認可を行います
	OAuth2Authorize(context.Context, *connect_go.Request[v1.OAuth2AuthorizeRequest]) (*connect_go.Response[emptypb.Empty], error)
	// OAuth2Callback OAuth2のコールバックを受け取ります
	OAuth2Callback(context.Context, *connect_go.Request[v1.OAuth2CallbackRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewGeneralAPIServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGeneralAPIServiceHandler(svc GeneralAPIServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	generalAPIServiceGetMeetingsHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceGetMeetingsProcedure,
		svc.GetMeetings,
		opts...,
	)
	generalAPIServiceGetMeetingHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceGetMeetingProcedure,
		svc.GetMeeting,
		opts...,
	)
	generalAPIServiceGetMeetingCommentsHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceGetMeetingCommentsProcedure,
		svc.GetMeetingComments,
		opts...,
	)
	generalAPIServiceGetMeetingReactionsHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceGetMeetingReactionsProcedure,
		svc.GetMeetingReactions,
		opts...,
	)
	generalAPIServiceConnectToMeetingStreamHandler := connect_go.NewServerStreamHandler(
		GeneralAPIServiceConnectToMeetingStreamProcedure,
		svc.ConnectToMeetingStream,
		opts...,
	)
	generalAPIServiceSendCommentHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceSendCommentProcedure,
		svc.SendComment,
		opts...,
	)
	generalAPIServiceSendReactionHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceSendReactionProcedure,
		svc.SendReaction,
		opts...,
	)
	generalAPIServiceOAuth2AuthorizeHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceOAuth2AuthorizeProcedure,
		svc.OAuth2Authorize,
		opts...,
	)
	generalAPIServiceOAuth2CallbackHandler := connect_go.NewUnaryHandler(
		GeneralAPIServiceOAuth2CallbackProcedure,
		svc.OAuth2Callback,
		opts...,
	)
	return "/emoine_r.v1.GeneralAPIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GeneralAPIServiceGetMeetingsProcedure:
			generalAPIServiceGetMeetingsHandler.ServeHTTP(w, r)
		case GeneralAPIServiceGetMeetingProcedure:
			generalAPIServiceGetMeetingHandler.ServeHTTP(w, r)
		case GeneralAPIServiceGetMeetingCommentsProcedure:
			generalAPIServiceGetMeetingCommentsHandler.ServeHTTP(w, r)
		case GeneralAPIServiceGetMeetingReactionsProcedure:
			generalAPIServiceGetMeetingReactionsHandler.ServeHTTP(w, r)
		case GeneralAPIServiceConnectToMeetingStreamProcedure:
			generalAPIServiceConnectToMeetingStreamHandler.ServeHTTP(w, r)
		case GeneralAPIServiceSendCommentProcedure:
			generalAPIServiceSendCommentHandler.ServeHTTP(w, r)
		case GeneralAPIServiceSendReactionProcedure:
			generalAPIServiceSendReactionHandler.ServeHTTP(w, r)
		case GeneralAPIServiceOAuth2AuthorizeProcedure:
			generalAPIServiceOAuth2AuthorizeHandler.ServeHTTP(w, r)
		case GeneralAPIServiceOAuth2CallbackProcedure:
			generalAPIServiceOAuth2CallbackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGeneralAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGeneralAPIServiceHandler struct{}

func (UnimplementedGeneralAPIServiceHandler) GetMeetings(context.Context, *connect_go.Request[v1.GetMeetingsRequest]) (*connect_go.Response[v1.GetMeetingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.GetMeetings is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) GetMeeting(context.Context, *connect_go.Request[v1.GetMeetingRequest]) (*connect_go.Response[v1.GetMeetingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.GetMeeting is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) GetMeetingComments(context.Context, *connect_go.Request[v1.GetMeetingCommentsRequest]) (*connect_go.Response[v1.GetMeetingCommentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.GetMeetingComments is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) GetMeetingReactions(context.Context, *connect_go.Request[v1.GetMeetingReactionsRequest]) (*connect_go.Response[v1.GetMeetingReactionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.GetMeetingReactions is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) ConnectToMeetingStream(context.Context, *connect_go.Request[v1.ConnectToMeetingStreamRequest], *connect_go.ServerStream[v1.ConnectToMeetingStreamResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.ConnectToMeetingStream is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) SendComment(context.Context, *connect_go.Request[v1.SendCommentRequest]) (*connect_go.Response[v1.SendCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.SendComment is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) SendReaction(context.Context, *connect_go.Request[v1.SendReactionRequest]) (*connect_go.Response[v1.SendReactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.SendReaction is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) OAuth2Authorize(context.Context, *connect_go.Request[v1.OAuth2AuthorizeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.OAuth2Authorize is not implemented"))
}

func (UnimplementedGeneralAPIServiceHandler) OAuth2Callback(context.Context, *connect_go.Request[v1.OAuth2CallbackRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emoine_r.v1.GeneralAPIService.OAuth2Callback is not implemented"))
}
